//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HeavyClient.RoutingWithBikes {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Station", Namespace="http://schemas.datacontract.org/2004/07/WebProxy")]
    [System.SerializableAttribute()]
    public partial class Station : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string addressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string contractNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int numberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HeavyClient.RoutingWithBikes.Position positionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string statusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HeavyClient.RoutingWithBikes.TotalStands totalStandsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string address {
            get {
                return this.addressField;
            }
            set {
                if ((object.ReferenceEquals(this.addressField, value) != true)) {
                    this.addressField = value;
                    this.RaisePropertyChanged("address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string contractName {
            get {
                return this.contractNameField;
            }
            set {
                if ((object.ReferenceEquals(this.contractNameField, value) != true)) {
                    this.contractNameField = value;
                    this.RaisePropertyChanged("contractName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int number {
            get {
                return this.numberField;
            }
            set {
                if ((this.numberField.Equals(value) != true)) {
                    this.numberField = value;
                    this.RaisePropertyChanged("number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HeavyClient.RoutingWithBikes.Position position {
            get {
                return this.positionField;
            }
            set {
                if ((object.ReferenceEquals(this.positionField, value) != true)) {
                    this.positionField = value;
                    this.RaisePropertyChanged("position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string status {
            get {
                return this.statusField;
            }
            set {
                if ((object.ReferenceEquals(this.statusField, value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HeavyClient.RoutingWithBikes.TotalStands totalStands {
            get {
                return this.totalStandsField;
            }
            set {
                if ((object.ReferenceEquals(this.totalStandsField, value) != true)) {
                    this.totalStandsField = value;
                    this.RaisePropertyChanged("totalStands");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Position", Namespace="http://schemas.datacontract.org/2004/07/WebProxy")]
    [System.SerializableAttribute()]
    public partial class Position : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float latitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float longitudeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float latitude {
            get {
                return this.latitudeField;
            }
            set {
                if ((this.latitudeField.Equals(value) != true)) {
                    this.latitudeField = value;
                    this.RaisePropertyChanged("latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float longitude {
            get {
                return this.longitudeField;
            }
            set {
                if ((this.longitudeField.Equals(value) != true)) {
                    this.longitudeField = value;
                    this.RaisePropertyChanged("longitude");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TotalStands", Namespace="http://schemas.datacontract.org/2004/07/WebProxy")]
    [System.SerializableAttribute()]
    public partial class TotalStands : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HeavyClient.RoutingWithBikes.Availabilities availabilitiesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HeavyClient.RoutingWithBikes.Availabilities availabilities {
            get {
                return this.availabilitiesField;
            }
            set {
                if ((object.ReferenceEquals(this.availabilitiesField, value) != true)) {
                    this.availabilitiesField = value;
                    this.RaisePropertyChanged("availabilities");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Availabilities", Namespace="http://schemas.datacontract.org/2004/07/WebProxy")]
    [System.SerializableAttribute()]
    public partial class Availabilities : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int bikesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int standsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int bikes {
            get {
                return this.bikesField;
            }
            set {
                if ((this.bikesField.Equals(value) != true)) {
                    this.bikesField = value;
                    this.RaisePropertyChanged("bikes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int stands {
            get {
                return this.standsField;
            }
            set {
                if ((this.standsField.Equals(value) != true)) {
                    this.standsField = value;
                    this.RaisePropertyChanged("stands");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RoutingWithBikes.IRoutingWithBikes")]
    public interface IRoutingWithBikes {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingWithBikes/GetAllStations", ReplyAction="http://tempuri.org/IRoutingWithBikes/GetAllStationsResponse")]
        HeavyClient.RoutingWithBikes.Station[] GetAllStations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingWithBikes/GetAllStations", ReplyAction="http://tempuri.org/IRoutingWithBikes/GetAllStationsResponse")]
        System.Threading.Tasks.Task<HeavyClient.RoutingWithBikes.Station[]> GetAllStationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingWithBikes/GetNearestStation", ReplyAction="http://tempuri.org/IRoutingWithBikes/GetNearestStationResponse")]
        HeavyClient.RoutingWithBikes.Station[] GetNearestStation(float latitude, float longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingWithBikes/GetNearestStation", ReplyAction="http://tempuri.org/IRoutingWithBikes/GetNearestStationResponse")]
        System.Threading.Tasks.Task<HeavyClient.RoutingWithBikes.Station[]> GetNearestStationAsync(float latitude, float longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingWithBikes/GetNearestStationWithBikes", ReplyAction="http://tempuri.org/IRoutingWithBikes/GetNearestStationWithBikesResponse")]
        HeavyClient.RoutingWithBikes.Station GetNearestStationWithBikes(float latitude, float longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingWithBikes/GetNearestStationWithBikes", ReplyAction="http://tempuri.org/IRoutingWithBikes/GetNearestStationWithBikesResponse")]
        System.Threading.Tasks.Task<HeavyClient.RoutingWithBikes.Station> GetNearestStationWithBikesAsync(float latitude, float longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingWithBikes/GetNearestStationWithStands", ReplyAction="http://tempuri.org/IRoutingWithBikes/GetNearestStationWithStandsResponse")]
        HeavyClient.RoutingWithBikes.Station GetNearestStationWithStands(float latitude, float longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingWithBikes/GetNearestStationWithStands", ReplyAction="http://tempuri.org/IRoutingWithBikes/GetNearestStationWithStandsResponse")]
        System.Threading.Tasks.Task<HeavyClient.RoutingWithBikes.Station> GetNearestStationWithStandsAsync(float latitude, float longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingWithBikes/GetPath", ReplyAction="http://tempuri.org/IRoutingWithBikes/GetPathResponse")]
        HeavyClient.RoutingWithBikes.Position[] GetPath(float Slatitude, float Slongitude, float Elatitude, float Elongitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingWithBikes/GetPath", ReplyAction="http://tempuri.org/IRoutingWithBikes/GetPathResponse")]
        System.Threading.Tasks.Task<HeavyClient.RoutingWithBikes.Position[]> GetPathAsync(float Slatitude, float Slongitude, float Elatitude, float Elongitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingWithBikes/GetPathDirections", ReplyAction="http://tempuri.org/IRoutingWithBikes/GetPathDirectionsResponse")]
        string[] GetPathDirections(float Slatitude, float Slongitude, float Elatitude, float Elongitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingWithBikes/GetPathDirections", ReplyAction="http://tempuri.org/IRoutingWithBikes/GetPathDirectionsResponse")]
        System.Threading.Tasks.Task<string[]> GetPathDirectionsAsync(float Slatitude, float Slongitude, float Elatitude, float Elongitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingWithBikes/GetFullPath", ReplyAction="http://tempuri.org/IRoutingWithBikes/GetFullPathResponse")]
        HeavyClient.RoutingWithBikes.Position[][] GetFullPath(float Slatitude, float Slongitude, float Elatitude, float Elongitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingWithBikes/GetFullPath", ReplyAction="http://tempuri.org/IRoutingWithBikes/GetFullPathResponse")]
        System.Threading.Tasks.Task<HeavyClient.RoutingWithBikes.Position[][]> GetFullPathAsync(float Slatitude, float Slongitude, float Elatitude, float Elongitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingWithBikes/GetFullDirections", ReplyAction="http://tempuri.org/IRoutingWithBikes/GetFullDirectionsResponse")]
        string[][] GetFullDirections(float Slatitude, float Slongitude, float Elatitude, float Elongitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoutingWithBikes/GetFullDirections", ReplyAction="http://tempuri.org/IRoutingWithBikes/GetFullDirectionsResponse")]
        System.Threading.Tasks.Task<string[][]> GetFullDirectionsAsync(float Slatitude, float Slongitude, float Elatitude, float Elongitude);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRoutingWithBikesChannel : HeavyClient.RoutingWithBikes.IRoutingWithBikes, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RoutingWithBikesClient : System.ServiceModel.ClientBase<HeavyClient.RoutingWithBikes.IRoutingWithBikes>, HeavyClient.RoutingWithBikes.IRoutingWithBikes {
        
        public RoutingWithBikesClient() {
        }
        
        public RoutingWithBikesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RoutingWithBikesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoutingWithBikesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoutingWithBikesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public HeavyClient.RoutingWithBikes.Station[] GetAllStations() {
            return base.Channel.GetAllStations();
        }
        
        public System.Threading.Tasks.Task<HeavyClient.RoutingWithBikes.Station[]> GetAllStationsAsync() {
            return base.Channel.GetAllStationsAsync();
        }
        
        public HeavyClient.RoutingWithBikes.Station[] GetNearestStation(float latitude, float longitude) {
            return base.Channel.GetNearestStation(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<HeavyClient.RoutingWithBikes.Station[]> GetNearestStationAsync(float latitude, float longitude) {
            return base.Channel.GetNearestStationAsync(latitude, longitude);
        }
        
        public HeavyClient.RoutingWithBikes.Station GetNearestStationWithBikes(float latitude, float longitude) {
            return base.Channel.GetNearestStationWithBikes(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<HeavyClient.RoutingWithBikes.Station> GetNearestStationWithBikesAsync(float latitude, float longitude) {
            return base.Channel.GetNearestStationWithBikesAsync(latitude, longitude);
        }
        
        public HeavyClient.RoutingWithBikes.Station GetNearestStationWithStands(float latitude, float longitude) {
            return base.Channel.GetNearestStationWithStands(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<HeavyClient.RoutingWithBikes.Station> GetNearestStationWithStandsAsync(float latitude, float longitude) {
            return base.Channel.GetNearestStationWithStandsAsync(latitude, longitude);
        }
        
        public HeavyClient.RoutingWithBikes.Position[] GetPath(float Slatitude, float Slongitude, float Elatitude, float Elongitude) {
            return base.Channel.GetPath(Slatitude, Slongitude, Elatitude, Elongitude);
        }
        
        public System.Threading.Tasks.Task<HeavyClient.RoutingWithBikes.Position[]> GetPathAsync(float Slatitude, float Slongitude, float Elatitude, float Elongitude) {
            return base.Channel.GetPathAsync(Slatitude, Slongitude, Elatitude, Elongitude);
        }
        
        public string[] GetPathDirections(float Slatitude, float Slongitude, float Elatitude, float Elongitude) {
            return base.Channel.GetPathDirections(Slatitude, Slongitude, Elatitude, Elongitude);
        }
        
        public System.Threading.Tasks.Task<string[]> GetPathDirectionsAsync(float Slatitude, float Slongitude, float Elatitude, float Elongitude) {
            return base.Channel.GetPathDirectionsAsync(Slatitude, Slongitude, Elatitude, Elongitude);
        }
        
        public HeavyClient.RoutingWithBikes.Position[][] GetFullPath(float Slatitude, float Slongitude, float Elatitude, float Elongitude) {
            return base.Channel.GetFullPath(Slatitude, Slongitude, Elatitude, Elongitude);
        }
        
        public System.Threading.Tasks.Task<HeavyClient.RoutingWithBikes.Position[][]> GetFullPathAsync(float Slatitude, float Slongitude, float Elatitude, float Elongitude) {
            return base.Channel.GetFullPathAsync(Slatitude, Slongitude, Elatitude, Elongitude);
        }
        
        public string[][] GetFullDirections(float Slatitude, float Slongitude, float Elatitude, float Elongitude) {
            return base.Channel.GetFullDirections(Slatitude, Slongitude, Elatitude, Elongitude);
        }
        
        public System.Threading.Tasks.Task<string[][]> GetFullDirectionsAsync(float Slatitude, float Slongitude, float Elatitude, float Elongitude) {
            return base.Channel.GetFullDirectionsAsync(Slatitude, Slongitude, Elatitude, Elongitude);
        }
    }
}
